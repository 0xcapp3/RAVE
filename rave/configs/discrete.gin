from __gin__ import dynamic_registration

include "configs/v2.gin"

import rave
from rave import core
from rave import blocks
from rave import balancer
from rave import discriminator

import torch.nn as nn

NUM_QUANTIZERS = 16
RATIOS = [4, 2, 2, 2, 2]
DILATIONS = [1, 3, 9]
LATENT_SIZE = 512
CODEBOOK_SIZE = 1024
DYNAMIC_MASKING = True
KERNEL_SIZE = 3

CAPACITY = 32

# ENCODER
blocks.ResidualVectorQuantize:
    dim = %LATENT_SIZE
    num_quantizers = %NUM_QUANTIZERS
    codebook_size = %CODEBOOK_SIZE
    dynamic_masking = %DYNAMIC_MASKING

blocks.EncoderV2:
    data_size = %N_BAND
    capacity = %CAPACITY
    ratios = %RATIOS
    latent_size = %LATENT_SIZE
    n_out = 1
    kernel_size = %KERNEL_SIZE
    dilations = %DILATIONS

blocks.DiscreteEncoder:
    encoder_cls = @blocks.EncoderV2
    rvq_cls = @blocks.ResidualVectorQuantize
    latent_size = %LATENT_SIZE
    num_quantizers = %NUM_QUANTIZERS

# GENERATOR
blocks.GeneratorV2:
    data_size = %N_BAND
    capacity = %CAPACITY
    ratios = %RATIOS
    latent_size = %LATENT_SIZE
    kernel_size = %KERNEL_SIZE
    dilations = %DILATIONS

# DISTANCES
core.AudioDistanceV1:
    log_epsilon = 1

# BALANCER
balancer.Balancer:
    weights = {
        'feature_matching' : 20,
        'regularization' : .1,
    }
    scale_gradients = False

discriminator.CombineDiscriminators:
    discriminators = [
        @discriminator.MultiPeriodDiscriminator,
        @discriminator.MultiScaleDiscriminator
    ]

# RAVE
rave.RAVE:
    encoder = @blocks.DiscreteEncoder
    decoder = @blocks.GeneratorV2
    phase_1_duration = 200000
    warmup_quantize = -1
    update_discriminator_every = 1
    discriminator = @discriminator.CombineDiscriminators
    gan_loss = @core.hinge_gan
    valid_signal_crop =  True
    num_skipped_features = 0

